syntax = "proto3";

package ni.measurements.data.v1;

import "ni/protobuf/types/precision_timestamp.proto";
import "ni/datamonikers/v1/data_moniker.proto";
import "ni/measurements/metadata/v1/metadata_store.proto";
import "ni/protobuf/types/scalar.proto";
import "ni/protobuf/types/vector.proto";
import "ni/protobuf/types/waveform.proto";
import "ni/protobuf/types/xydata.proto";

option csharp_namespace = "NationalInstruments.Measurements.Data.V1";
option go_package = "datav1";
option java_multiple_files = true;
option java_outer_classname = "DataStoreProto";
option java_package = "com.ni.measurements.data.v1";
option objc_class_prefix = "NIMD";
option php_namespace = "NI\\Measurements\\Data\\V1";
option ruby_package = "NI::Measurements::Data::V1";

message PublishedCondition {
  // The moniker of the condition that this value is associated with.
  // This moniker returns a ni.measurements.measurement.v1.ScalarArray
  ni.datamonikers.v1.Moniker moniker = 1;
  
  // The unique identifier of the condition. This can be used
  // to reference and find the condition in the data store.
  string published_condition_id = 3;
  // The name of the condition.
  string condition_name = 4;
  // The type of the condition. For example, "Setup" or "Environment".
  string condition_type = 5;
  // The id of the step with which this condition is associated.
  string step_id = 6;
  // The id of the test result with which this condition is associated.
  string test_result_id = 7;
}

message PublishedMeasurement {
  // The moniker providing access to measurement data.
  // Scalar measurements are returned as Vectors; other types are returned as published.
  ni.datamonikers.v1.Moniker moniker = 1;
  // The conditions associated with the test step that owns this measurement.
  repeated PublishedCondition published_conditions = 2;
  
  // The id of the measurement.
  string published_measurement_id = 3;
  // The id of the test result with which this measurement is associated.
  string test_result_id = 4;
  // The id of the step with which this measurement is associated.
  string step_id = 5;
  // The ids of the software items with which this measurement is associated.
  repeated string software_item_ids = 6;
  // The ids of the hardware items with which this measurement is associated.
  repeated string hardware_item_ids = 7;
  // The ids of the test adapters with which this measurement is associated.
  repeated string test_adapter_ids = 8;
  // The name used to group measurements across multiple publishes.
  string measurement_name = 9;
  // The type of the measurement. This is used to filter measurements in queries.
  string data_type = 10;
  // Any notes about the measurement.
  string measurement_notes = 11;
  // The time at which the measurement was first published.  If the measurement represents a parametric set,
  // this is the timestamp of the first measurement published to the parametric set.
  ni.protobuf.types.PrecisionTimestamp measurement_start_time = 12;
  // The time at which the measurement was last published.  If the measurement represents a parametric set,
  // this is the timestamp of the last measurement published to the parametric set.
  ni.protobuf.types.PrecisionTimestamp measurement_end_time = 13;
  // The most 'significant' outcome that was observed when publishing to this measurement.
  // Significance hierarchy: Unspecified (default) < Passed < Indeterminate < Failed
  Outcome outcome = 14;
  // The index within a parametric set, or -1 if this represents the entire set.
  int32 parametric_index = 15;
  // Error or exception information in JSON format
  ErrorInformation error_information = 16;
}

// The information about the test result with which a test step is associated.
message TestResult {
  // Optional.
  // If you specify an id, the value is expected to be a parsable GUID.
  // If you do not specify an id, one will be generated for you, and
  // returned in the response.
  string test_result_id = 1;
  // Optional. The id of the UUT instance associated with this test result.
  // This value is expected to be a parsable GUID or an alias. It will always
  // be returned from the service as a GUID.
  // See ni.measurements.metadata.MetadataStoreService for more information.
  string uut_instance_id = 3;
  // Optional. The id of the operator associated with this test result.
  // This value is expected to be a parsable GUID or an alias. It will always
  // be returned from the service as a GUID.
  // See ni.measurements.metadata.MetadataStoreService for more information.
  string operator_id = 5;
  // Optional. The id of the test station associated with this test result.
  // This value is expected to be a parsable GUID or an alias. It will always
  // be returned from the service as a GUID.
  // See ni.measurements.metadata.MetadataStoreService for more information.
  string test_station_id = 7;
  // Optional. The id of the test description associated with this test result.
  // This value is expected to be a parsable GUID or an alias. It will always
  // be returned from the service as a GUID.
  // See ni.measurements.metadata.MetadataStoreService for more information.
  string test_description_id = 9;
  // Optional. The ids of the software item associated with this test result. These values are expected
  // to be parsable GUIDs or aliases. They will always be returned from the service as GUIDs.
  repeated string software_item_ids = 11;
  // Optional. The ids of the hardware item associated with this test result. These values are expected
  // to be parsable GUIDs or aliases. They will always be returned from the service as GUIDs.
  repeated string hardware_item_ids = 13;
  // Optional. The ids of the test adapters associated with this test result. These values are expected
  // to be parsable GUIDs or aliases. They will always be returned from the service as GUIDs.
  repeated string test_adapter_ids = 14;
  // Optional.
  // The name of the test result.  This value should only contain letters,
  // numbers, spaces, hyphens, underscores, parentheses, periods and
  // spaces. It must begin and end with a letter or number.
  // Expected format: ^[\w\(\)-]([\w.\(\) -]*[\w\(\)-])?$
  string test_result_name = 15;
  // Optional. Start date and time of the test execution (timestamp)
  ni.protobuf.types.PrecisionTimestamp start_date_time = 16;
  // Optional. End date and time of the test execution (timestamp)
  ni.protobuf.types.PrecisionTimestamp end_date_time = 17;
  // Optional. Overall test result outcome (e.g., Passed, Failed, Indeterminate)
  Outcome outcome = 18;
  // Optional. A link to a resource that describes the test result.
  // This value is expected to be a valid URI.
  string link = 19;
  // Optional. Any extension to be associated with the test result.
  map<string, ni.measurements.metadata.v1.ExtensionValue> extensions = 20;
  // Optional.  If any of your messages contain 'extension', you must register
  // a schema, and specify the schema id here.  In that case, all metadata will
  // be validated against the specified schema.
  string schema_id = 21;
}

// This represents all published values for a single condition in a test step.
message ConditionBatch {
  // The identifier describing the values of this condition. For example, "Voltage".
  string condition_batch_name = 1;
  // The type of this condition. For example, "Upper Limit" or "Environment".
  string type = 2;
  // The values for this condition across for all publishes on the test step.
  oneof values {
    ni.protobuf.types.Vector vector = 3;
  }
}

message Measurement {
  // Required for measurement. This name is used for associating/grouping conceptually alike measurements across multiple publish iterations.
  // For example, a shared name of "Temperature" can be used for associating temperature readings across multiple iterations of publishing.
  string publishable_measurement_name = 1;

  // Required. The value of the measurement being published.
  oneof value {
    ni.protobuf.types.Scalar scalar = 2;
    ni.protobuf.types.Vector vector = 3;
    ni.protobuf.types.DoubleAnalogWaveform double_analog_waveform = 4;
    ni.protobuf.types.DoubleXYData x_y_data = 5;
    ni.protobuf.types.I16AnalogWaveform i16_analog_waveform = 6;
    ni.protobuf.types.DoubleComplexWaveform double_complex_waveform = 7;
    ni.protobuf.types.I16ComplexWaveform i16_complex_waveform = 8;
    ni.protobuf.types.DoubleSpectrum double_spectrum = 9;
  }
}

// This message is used to publish a batch of measurements to the data store. It is used to
// publish an entire batch of measurements at once, rather than publishing them one by one.
// For instance, in the case of a parametric sweep, this message can be used to publish
// all the measurements for all of the iterations of the loop in a single message.
message MeasurementBatch {
  // Required for measurement. This name is used for associating/grouping conceptually alike measurements across multiple publish iterations.
  // For example, a shared name of "Temperature" can be used for associating temperature readings across multiple iterations of publishing.
  string publishable_measurement_batch_name = 1;

  // Required. The value of the measurement being published.
  oneof values {
    ni.protobuf.types.Vector scalar_measurement_batch = 2;
  }
}

// Represents the metadata of the step that was taken
message Step
{
  // The unique identifier of the step
  // This value should be a string representation of a UUID.
  string step_id = 1;
  // The parent step identifier
  string parent_step_id = 2;
  // Optional.
  // The id of the test result associated with this test step.
  // If not specified, a test result will be created from the
  // information that can be implicitly obtained.
  string test_result_id = 3;
  // Optional. The id of the test associated with this test step.
  // This value is expected to be a parsable GUID or an alias. It will always
  // be returned from the service as a GUID.
  // See ni.measurements.metadata.MetadataStoreService for more information.
  string test_id = 5;
  // Required. The name of the step.
  string step_name = 6;
  // Step type (e.g., Setup, Action, Measurement, Cleanup)
  string step_type = 7;
  // Any notes about the step
  string notes = 8;
  // Start date and time of the test step (timestamp)
  ni.protobuf.types.PrecisionTimestamp start_date_time = 9;
  // End date and time of the test step (timestamp)
  ni.protobuf.types.PrecisionTimestamp end_date_time = 10;
  // A link to a resource that describes the step.
  // This value is expected to be a valid URI.
  string link = 11;
  // Any extension to be associated with the test step
  map<string, ni.measurements.metadata.v1.ExtensionValue> extension = 12;
  // The unique identifier of the schema that applies to this instance's extension.
  // If any extension is associated with this instance, a schema_id must be provided, unless
  // the test step is created within the context of a test result, in which case
  // the test result must have a schema_id.
  string schema_id = 13;
}

// Describes the outcome of a measurement
enum Outcome
{
  // No outcome was specified.
  OUTCOME_UNSPECIFIED = 0;
  // The measurement passed.
  OUTCOME_PASSED = 1;
  // The measurement failed.
  OUTCOME_FAILED = 2;
  // The outcome is indeterminate.
  OUTCOME_INDETERMINATE = 3;
}

// Represents an error message resulting from a failed operation
message ErrorInformation {
  // The error code associated with the error
  int32 error_code = 1;
  // The error message associated with the error
  string message = 2;
  // Information about the source of the error.
  string source = 3;
}
