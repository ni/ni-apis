syntax = "proto3";

package ni.measurements.data.v1;

import "ni/protobuf/types/precision_timestamp.proto";
import "ni/measurements/data/v1/data_store.proto";
import "ni/protobuf/types/scalar.proto";
import "ni/protobuf/types/vector.proto";
import "ni/protobuf/types/waveform.proto";
import "ni/protobuf/types/xydata.proto";

option csharp_namespace = "NationalInstruments.Measurements.Data.V1";
option go_package = "datav1";
option java_multiple_files = true;
option java_outer_classname = "DataStoreServiceProto";
option java_package = "com.ni.measurements.data.v1";
option objc_class_prefix = "NIMD";
option php_namespace = "NI\\Measurements\\Data\\V1";
option ruby_package = "NI::Measurements::Data::V1";

// This service provides endpoints for the publishing of measurements.
// This includes associating measurements with the conditions associated with the measurement and
// querying for the published measurements with OData queries.
service DataStoreService {

  // Creates a test result object for publishing measurements.  Once a test result is created,
  // you can publish an arbitrary number of measurements to the test result.  The measurements
  // will be associated with each of the metadata types specified in the test result.  For instance,
  // if you specify an operator when creating a test result, all measurements published to the test result
  // will be associated with that operator.  The response will include the test result id,
  // which can be used to reference the test result in subsequent requests, and to get the test result
  // metadata via the GetTestResult method.
  rpc CreateTestResult(CreateTestResultRequest) returns (CreateTestResultResponse);
  // Gets the test result associated with the identifier given in the request.
  rpc GetTestResult(GetTestResultRequest) returns (GetTestResultResponse);

  // Creates a new step in the data store.  A step is owned by a test result,
  // and is a logical grouping of published measurements.  All published measurements must be associated
  // with a step.
  rpc CreateStep(CreateStepRequest) returns (CreateStepResponse);
  // Gets the step associated with the identifier given in the request.
  rpc GetStep(GetStepRequest) returns (GetStepResponse);
  // Query for steps matching the given OData query.  For information about the OData query syntax,
  // see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
  rpc QuerySteps(QueryStepsRequest) returns (QueryStepsResponse);

  // Publishes a single condition value for a test step. Conditions are contextual values
  // like input voltage, temperature, or humidity present during measurement.
  rpc PublishCondition(PublishConditionRequest) returns (PublishConditionResponse);
  // Publishes multiple condition values at once for parametric sweeps.
  rpc PublishConditionBatch(PublishConditionBatchRequest) returns (PublishConditionBatchResponse);
  // Publishes a single measurement value associated with a test step.
  rpc PublishMeasurement(PublishMeasurementRequest) returns (PublishMeasurementResponse);
  // Publishes multiple scalar measurements at once for parametric sweeps.
  rpc PublishMeasurementBatch(PublishMeasurementBatchRequest) returns (PublishMeasurementBatchResponse);

  // Queries conditions using OData query syntax.
  // See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
  rpc QueryConditions(QueryConditionsRequest) returns (QueryConditionsResponse);
  // Queries measurements using OData query syntax.
  // See https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
  rpc QueryMeasurements(QueryMeasurementsRequest) returns (QueryMeasurementsResponse);
}

message CreateTestResultRequest {
  // The metadata of the test result to be created.
  TestResult test_result = 1;
}

message CreateTestResultResponse {
  // The test result id. Generated if not specified in the request.
  string test_result_id = 1;
}

message GetTestResultRequest {
  // The id of the desired test result.
  // This value is expected to be a parsable GUID.
  string test_result_id = 1;
}

message GetTestResultResponse {
  // The TestResult object that corresponds to the requested id.
  TestResult test_result = 1;
}

message CreateStepRequest {
  // Required. The metadata of the step to be created.
  Step step = 1;
}

message CreateStepResponse {
  // The identifier of the created step.
  string step_id = 1;
}

// Message sent to get the step associated with the given identifier.
message GetStepRequest {
  // Required. The identifier of the desired step.
  string step_id = 1;
}

// Message returned when getting a step associated with the given identifier.
message GetStepResponse {
  // The metadata of the requested step.
  Step step = 1;
}

message QueryStepsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // An empty string will return all steps.
  // $expand, $count, and $select are not supported. For more information,
  // see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
  string odata_query = 1;
}

message QueryStepsResponse {
  // The list of steps that match the query.
  repeated Step steps = 1;
}

message PublishConditionRequest {
  // Required. Identifier describing the condition value. For example, "Voltage".
  string condition_name = 1;
  // Required. The type of this condition. For example, "Upper Limit" or "Environment".
  string type = 2;
  // Required. The single value for this condition for a publish on the test step.
  oneof value {
    ni.protobuf.types.Scalar scalar = 3;
  }

  // Required.
  // The id of the step associated with this condition.
  // This value is expected to be a parsable GUID.
  string step_id = 4;
}

message PublishConditionResponse {
  // A single condition present for the specified step.
  PublishedCondition published_condition = 1;
}


message PublishConditionBatchRequest {
  // Required. Identifier describing the condition values. For example, "Voltage".
  string condition_name = 1;
  // Required. The type of this condition. For example, "Upper Limit" or "Environment".
  string type = 2;
  // Required. The values for this condition across all publishes on the test step.
  oneof values {
    ni.protobuf.types.Vector scalar_values = 3;
  }

  // Required.
  // The id of the step associated with this batch of condition values.
  // This value is expected to be a parsable GUID.
  string step_id = 4;
}

message PublishConditionBatchResponse {
  // A shared value for *all* condition measurements present for the specified step.
  PublishedCondition published_condition = 1;
}

message PublishMeasurementRequest {
  // Required for measurement. This name is used for associating/grouping conceptually alike measurements across multiple publish iterations.
  // For example, a shared name of "Temperature" can be used for associating temperature readings across multiple iterations of publishing.
  string measurement_name = 1;

  // Required. The value of the measurement being published.
  oneof value {
    ni.protobuf.types.Scalar scalar = 2;
    ni.protobuf.types.Vector vector = 3;
    ni.protobuf.types.DoubleAnalogWaveform double_analog_waveform = 4;
    ni.protobuf.types.DoubleXYData x_y_data = 5;
    ni.protobuf.types.I16AnalogWaveform i16_analog_waveform = 6;
    ni.protobuf.types.DoubleComplexWaveform double_complex_waveform = 7;
    ni.protobuf.types.I16ComplexWaveform i16_complex_waveform = 8;
    ni.protobuf.types.DoubleSpectrum double_spectrum = 9;
    ni.protobuf.types.DigitalWaveform digital_waveform = 10;
  }
  // Optional. Any notes to be associated with the captured measurement.
  string notes = 11;
  // Required. The timestamp of the measurement.
  ni.protobuf.types.PrecisionTimestamp timestamp = 12;
  // Optional. The outcome of the measurement.
  Outcome outcome = 13;
  // Optional. Error or exception information in JSON format.
  ErrorInformation error_information = 14;

  // Required.
  // The id of the step associated with this measurement.
  // This value is expected to be a parsable GUID.
  string step_id = 15;

  // Optional. The ids of the hardware items associated with this measurement. These values are expected
  // to be parsable GUIDs or aliases.
  repeated string hardware_item_ids = 16;

  // Optional. The ids of the test adapters associated with this measurement. These values are expected
  // to be parsable GUIDs or aliases.
  repeated string test_adapter_ids = 17;

  // Optional. The ids of the software items associated with this measurement. These values are expected
  // to be parsable GUIDs or aliases.
  repeated string software_item_ids = 18;
}

message PublishMeasurementResponse {
  // The moniker of the published measurement and its metadata.
  PublishedMeasurement published_measurement = 1;
}

message PublishMeasurementBatchRequest {
  // Required for measurement. This name is used for associating/grouping conceptually alike measurements across multiple publish iterations.
  // For example, a shared name of "Temperature" can be used for associating temperature readings across multiple iterations of publishing.
  string measurement_name = 1;

  // Required. The values of the (scalar) measurement being published across N iterations.
  oneof values {
    ni.protobuf.types.Vector scalar_values = 2;
  }
  // Optional. The timestamps corresponding to the N iterations of batched measurement being published.
  // This field must meet one of the following requirements:
  //
  //   1. The field may be empty. (No timestamp information is recorded for the measurement.)
  //   2. The field may contain a single value. This value will be associated with each value of the batched measurement.
  //   3. The field may contain N values, where N is the number of individual batched measurements being published.
  //      In this case, each timestamp aligns with the scalar value at the corresponding index within the vector.
  //
  repeated ni.protobuf.types.PrecisionTimestamp timestamp = 3;
  // Optional. The outcomes corresponding to the N iterations of batched measurement being published.
  // This field must meet one of the following requirements:
  //
  //   1. The field may be empty. (No outcome information is recorded for the measurement.)
  //   2. The field may contain a single value. This value will be associated with each value of the batched measurement.
  //   3. The field may contain N values, where N is the number of individual batched measurements being published.
  //      In this case, each outcome aligns with the scalar value at the corresponding index within the vector.
  //
  repeated Outcome outcome = 4;
  // Optional. The error information corresponding to the N iterations of batched measurement being published.
  // This field must meet one of the following requirements:
  //
  //   1. The field may be empty. (No error information is recorded for the measurement.)
  //   2. The field may contain a single value. This value will be associated with each value of the batched measurement.
  //   3. The field may contain N values, where N is the number of individual batched measurements being published.
  //      In this case, each error information aligns with the scalar value at the corresponding index within the vector.
  //
  repeated ErrorInformation error_information = 5;

  // Required.
  // The id of the step associated with this measurement.
  // This value is expected to be a parsable GUID.
  string step_id = 6;

  // Optional. The ids of the hardware items associated with this measurement. These values are expected
  // to be parsable GUIDs or aliases.
  repeated string hardware_item_ids = 7;

  // Optional. The ids of the test adapters associated with this measurement. These values are expected
  // to be parsable GUIDs or aliases.
  repeated string test_adapter_ids = 8;

  // Optional. The ids of the software items associated with this measurement. These values are expected
  // to be parsable GUIDs or aliases.
  repeated string software_item_ids = 9;
}

message PublishMeasurementBatchResponse {
  // The monikers of the published measurements and their corresponding metadata.
  repeated PublishedMeasurement published_measurements = 1;
}



message QueryConditionsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // An empty string will return all conditions.
  // $expand, $count, and $select are not supported. For more information,
  // see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
  string odata_query = 1;
}

message QueryConditionsResponse {
  // The list of matching conditions. Each item contains a moniker for
  // retrieving the condition measurements, as well as the metadata associated
  // with the condition.
  repeated PublishedCondition published_conditions = 1;
}

message QueryMeasurementsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // An empty string will return all measurements.
  // $expand, $count, and $select are not supported. For more information,
  // see https://learn.microsoft.com/en-us/odata/concepts/queryoptions-overview.
  string odata_query = 1;
}

message QueryMeasurementsResponse {
  // The list of matching measurements. Each item contains a moniker for
  // retrieving the measurement, as well as the metadata associated with the measurement.
  repeated PublishedMeasurement published_measurements = 1;
}
