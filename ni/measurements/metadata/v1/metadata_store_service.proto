syntax = "proto3";

package ni.measurements.metadata.v1;

import "ni/measurements/metadata/v1/metadata_store.proto";

option csharp_namespace = "NationalInstruments.Measurements.Metadata.V1";
option go_package = "metadatav1";
option java_multiple_files = true;
option java_outer_classname = "MetadataStoreServiceProto";
option java_package = "com.ni.measurements.metadata.v1";
option objc_class_prefix = "NIMM";
option php_namespace = "NI\\Measurements\\Metadata\\V1";
option ruby_package = "NI::Measurements::Metadata::V1";

// This service is responsible for storing and retrieving metadata associated with test step measurements.
service MetadataStoreService {
  // Gets the UUT instance associated with the identifier given in the request.
  rpc GetUutInstance(GetUutInstanceRequest) returns (GetUutInstanceResponse);
  // Perform an OData query
  rpc QueryUutInstances(QueryUutInstancesRequest) returns (QueryUutInstancesResponse);
  // Creates a new UUT instance in the metadata store.
  rpc CreateUutInstance(CreateUutInstanceRequest) returns (CreateUutInstanceResponse);
  
  // Gets the UUT associated with the identifier given in the request.
  rpc GetUut(GetUutRequest) returns (GetUutResponse);
  // Perform an OData query
  rpc QueryUuts(QueryUutsRequest) returns (QueryUutsResponse);
  // Creates a new UUT in the metadata store.
  rpc CreateUut(CreateUutRequest) returns (CreateUutResponse);

  // Gets the operator associated with the identifier given in the request.
  rpc GetOperator(GetOperatorRequest) returns (GetOperatorResponse);
  // Perform an OData query
  rpc QueryOperators(QueryOperatorsRequest) returns (QueryOperatorsResponse);
  // Creates a new operator in the metadata store.
  rpc CreateOperator(CreateOperatorRequest) returns (CreateOperatorResponse);

  // Gets the test description associated with the identifier given in the request.
  rpc GetTestDescription(GetTestDescriptionRequest) returns (GetTestDescriptionResponse);
  // Perform an OData query
  rpc QueryTestDescriptions(QueryTestDescriptionsRequest) returns (QueryTestDescriptionsResponse);
  // Creates a new test description in the metadata store.
  rpc CreateTestDescription(CreateTestDescriptionRequest) returns (CreateTestDescriptionResponse);

  // Gets the test associated with the identifier given in the request.
  rpc GetTest(GetTestRequest) returns (GetTestResponse);
  // Perform an OData query
  rpc QueryTests(QueryTestsRequest) returns (QueryTestsResponse);
  // Creates a new test in the metadata store.
  rpc CreateTest(CreateTestRequest) returns (CreateTestResponse);

  // Gets the test station associated with the identifier given in the request.
  rpc GetTestStation(GetTestStationRequest) returns (GetTestStationResponse);
  // Perform an OData query
  rpc QueryTestStations(QueryTestStationsRequest) returns (QueryTestStationsResponse);
  // Creates a new test station in the metadata store.
  rpc CreateTestStation(CreateTestStationRequest) returns (CreateTestStationResponse);

  // Gets the hardware item associated with the identifier given in the request.
  rpc GetHardwareItem(GetHardwareItemRequest) returns (GetHardwareItemResponse);
  // Perform an OData query
  rpc QueryHardwareItems(QueryHardwareItemsRequest) returns (QueryHardwareItemsResponse);
  // Creates a new hardware item in the metadata store.
  rpc CreateHardwareItem(CreateHardwareItemRequest) returns (CreateHardwareItemResponse);

  // Gets the software item associated with the identifier given in the request.
  rpc GetSoftwareItem(GetSoftwareItemRequest) returns (GetSoftwareItemResponse);
  // Perform an OData query
  rpc QuerySoftwareItems(QuerySoftwareItemsRequest) returns (QuerySoftwareItemsResponse);
  // Creates a new software item in the metadata store.
  rpc CreateSoftwareItem(CreateSoftwareItemRequest) returns (CreateSoftwareItemResponse);

  // Gets the test adapter associated with the identifier given in the request.
  rpc GetTestAdapter(GetTestAdapterRequest) returns (GetTestAdapterResponse);
  // Perform an OData query
  rpc QueryTestAdapters(QueryTestAdaptersRequest) returns (QueryTestAdaptersResponse);
  // Creates a new test adapter in the metadata store.
  rpc CreateTestAdapter(CreateTestAdapterRequest) returns (CreateTestAdapterResponse);

  // Registers a schema. Once a schema has been published, it cannot be modified or removed.
  rpc RegisterExtensionSchema(RegisterExtensionSchemaRequest) returns (RegisterExtensionSchemaResponse);
  // List the extension schemas that have been previously registered
  rpc ListExtensionSchemas(ListExtensionSchemasRequest) returns (ListExtensionSchemasResponse);

  // Resolves a given alias to its target (i.e., the underlying metadata that it represents)
  rpc ResolveAlias(ResolveAliasRequest) returns (ResolveAliasResponse);
  // Perform an OData query on the registered aliases
  rpc QueryAliases(QueryAliasesRequest) returns (QueryAliasesResponse);
  // Registers an alias of the specified metadata for use/reference when creating other metadata or publishing.
  // Notes:
  // - The specified metadata must have already been created prior to the alias registration.
  // - This method may be called with an already registered alias name in order to update the target mapped for that existing alias.
  rpc RegisterAlias(RegisterAliasRequest) returns (RegisterAliasResponse);
  // Removes a registered alias
  rpc UnregisterAlias(UnregisterAliasRequest) returns (UnregisterAliasResponse);
}

// Message sent to get the UUT instance associated with the given identifier.
message GetUutInstanceRequest {
  // Required. The identifier of the desired UUT instance.
  string uut_instance_id = 1;
}

// Message returned when getting a UUT instance associated with the given identifier.
message GetUutInstanceResponse {
  // The metadata of the requested UUT instance.
  UutInstance uut_instance = 1;
}

message QueryUutInstancesRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryUutInstancesResponse {
  repeated UutInstance uut_instances = 1;
}

// Message sent to create a new UUT instance in the metadata store.
message CreateUutInstanceRequest {
  // Required. The metadata of the UUT instance to be created.
  UutInstance uut_instance = 1;
}

// Message returned when creating a new UUT instance in the metadata store.
message CreateUutInstanceResponse {
  // The identifier of the created UUT instance.
  string created_uut_instance_id = 1;
}

// Message sent to get the UUT associated with the given identifier.
message GetUutRequest {
  // Required. The identifier of the desired UUT.
  string uut_id = 1;
}

// Message returned when getting a UUT associated with the given identifier.
message GetUutResponse {
  // The metadata of the requested UUT.
  Uut uut = 1;
}

message QueryUutsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryUutsResponse {
  repeated Uut uuts = 1;
}

// Message sent to create a new UUT in the metadata store.
message CreateUutRequest {
  // Required. The metadata of the UUT to be created.
  Uut uut = 1;
}

// Message returned when creating a new UUT in the metadata store.
message CreateUutResponse {
  // The identifier of the created UUT.
  string created_uut_id = 1;
}

// Message sent to get the operator associated with the given identifier.
message GetOperatorRequest {
  // Required. The identifier of the desired operator.
  string operator_id = 1;
}

// Message returned when getting an operator associated with the given identifier.
message GetOperatorResponse {
  // The metadata of the requested operator.
  Operator operator = 1;
}

message QueryOperatorsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryOperatorsResponse {
  repeated Operator operators = 1;
}

// Message sent to create a new operator in the metadata store.
message CreateOperatorRequest {
  // Required. The metadata of the operator to be created.
  Operator operator = 1;
}

// Message returned when creating a new operator in the metadata store.
message CreateOperatorResponse {
  // The identifier of the created operator.
  string created_operator_id = 1;
}

// Message sent to get the test description associated with the given identifier.
message GetTestDescriptionRequest {
  // Required. The identifier of the desired test description.
  string test_description_id = 1;
}

// Message returned when getting a test description associated with the given identifier.
message GetTestDescriptionResponse {
  // The metadata of the requested test description.
  TestDescription test_description = 1;
}

message QueryTestDescriptionsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryTestDescriptionsResponse {
  repeated TestDescription test_descriptions = 1;
}

// Message sent to create a new test description in the metadata store.
message CreateTestDescriptionRequest {
  // Required. The metadata of the test description to be created.
  TestDescription test_description = 1;
}

// Message returned when creating a new test description in the metadata store.
message CreateTestDescriptionResponse {
  // The identifier of the created test description.
  string created_test_description_id = 1;
}

// Message sent to get the test associated with the given identifier.
message GetTestRequest {
  // Required. The identifier of the desired test.
  string test_id = 1;
}

// Message returned when getting a test associated with the given identifier.
message GetTestResponse {
  // The metadata of the requested test.
  Test test = 1;
}

message QueryTestsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryTestsResponse {
  repeated Test tests = 1;
}

// Message sent to create a new test in the metadata store.
message CreateTestRequest {
  // Required. The metadata of the test to be created.
  Test test = 1;
}

// Message returned when creating a new test in the metadata store.
message CreateTestResponse {
  // The identifier of the created test.
  string created_test_id = 1;
}

// Message sent to get the test station associated with the given identifier.
message GetTestStationRequest {
  // Required. The identifier of the desired test station.
  string test_station_id = 1;
}

// Message returned when getting a test station associated with the given identifier.
message GetTestStationResponse {
  // The metadata of the requested test station.
  TestStation test_station = 1;
}

message QueryTestStationsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryTestStationsResponse {
  repeated TestStation test_stations = 1;
}

// Message sent to create a new test station in the metadata store.
message CreateTestStationRequest {
  // Required. The metadata of the test station to be created.
  TestStation test_station = 1;
}

// Message returned when creating a new test station in the metadata store.
message CreateTestStationResponse {
  // The identifier of the created test station.
  string created_test_station_id = 1;
}

// Message sent to get the hardware item associated with the given identifier.
message GetHardwareItemRequest {
  // Required. The identifier of the desired hardware item.
  string hardware_item_id = 1;
}

// Message returned when getting the hardware item associated with the given identifier.
message GetHardwareItemResponse {
  // The metadata of the requested hardware item.
  HardwareItem hardware_item = 1;
}

message QueryHardwareItemsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryHardwareItemsResponse {
  repeated HardwareItem hardware_items = 1;
}

// Message sent to create new hardware item in the metadata store.
message CreateHardwareItemRequest {
  // Required. The metadata of the hardware item to be created.
  HardwareItem hardware_item = 1;
}

// Message returned when creating new hardware item in the metadata store.
message CreateHardwareItemResponse {
  // The identifier of the created hardware item.
  string created_hardware_item_id = 1;
}

// Message sent to get the software item associated with the given identifier.
message GetSoftwareItemRequest {
  // Required. The identifier of the desired software item.
  string software_item_id = 1;
}

// Message returned when getting the software item associated with the given identifier.
message GetSoftwareItemResponse {
  // The metadata of the requested software item.
  SoftwareItem software_item = 1;
}

message QuerySoftwareItemsRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QuerySoftwareItemsResponse {
  repeated SoftwareItem software_items = 1;
}

// Message sent to create new software item in the metadata store.
message CreateSoftwareItemRequest {
  // Required. The metadata of the software item to be created.
  SoftwareItem software_item = 1;
}

// Message returned when creating new software item in the metadata store.
message CreateSoftwareItemResponse {
  // The identifier of the created software item.
  string created_software_item_id = 1;
}

// Message sent to get the test adapter associated with the given identifier.
message GetTestAdapterRequest {
  // Required. The identifier of the desired test adapter.
  string test_adapter_id = 1;
}

// Message returned when getting the test adapter associated with the given identifier.
message GetTestAdapterResponse {
  // The metadata of the requested test adapter.
  TestAdapter test_adapter = 1;
}

message QueryTestAdaptersRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryTestAdaptersResponse {
  repeated TestAdapter test_adapters = 1;
}

// Message sent to create new test adapter in the metadata store.
message CreateTestAdapterRequest {
  // Required. The metadata of the test adapter to be created.
  TestAdapter test_adapter = 1;
}

// Message returned when creating new test adapter in the metadata store.
message CreateTestAdapterResponse {
  // The identifier of the created test adapter.
  string created_test_adapter_id = 1;
}

message RegisterExtensionSchemaRequest {
  // The contents of the JSON or TOML schema. This should be a
  // well-formed JSON or TOML schema.  Validation will be performed, and
  // an error will be returned if the schema is not valid.
  string schema = 1;
}

message RegisterExtensionSchemaResponse {
  // The id of the schema
  string schema_id = 1;
}

message ListExtensionSchemasRequest {
}

message ListExtensionSchemasResponse {
  repeated ExtensionSchema schemas = 1;
}

message ResolveAliasRequest {
  string alias_name = 1;
}

message ResolveAliasResponse {
  Alias alias = 1;
}

message QueryAliasesRequest {
  // an OData query string.  example "$filter=name eq 'Value'"
  // $expand is not supported
  string odata_query = 1;
}

message QueryAliasesResponse {
  repeated Alias aliases = 1;
}

message RegisterAliasRequest {
  // The alias name to register.
  string alias_name = 1;

  // The metadata instance to alias.
  // NOTE: The metadata instance to alias must have already been created
  // in the metadata store in order to register an alias for it.
  oneof alias_target {
    UutInstance uut_instance = 2;
    Uut uut = 3;
    HardwareItem hardware_item = 4;
    SoftwareItem software_item = 5;
    Operator operator = 6;
    TestDescription test_description = 7;
    Test test = 8;
    TestStation test_station = 9;
    TestAdapter test_adapter = 11;
  }
}

message RegisterAliasResponse {
  Alias alias = 1;
} 

message UnregisterAliasRequest {
  // The name of the alias to unregister
  string alias_name = 1;
}

message UnregisterAliasResponse {
  // Whether the action resulted in the specified alias becoming unregistered. (False if the alias does not exist.)
  bool unregistered = 1;
}