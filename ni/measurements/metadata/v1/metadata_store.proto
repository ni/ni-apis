syntax = "proto3";

package ni.measurements.metadata.v1;

option csharp_namespace = "NationalInstruments.Measurements.Metadata.V1";
option go_package = "metadatav1";
option java_multiple_files = true;
option java_outer_classname = "MetadataStoreProto";
option java_package = "com.ni.measurements.metadata.v1";
option objc_class_prefix = "NIMM";
option php_namespace = "NI\\Measurements\\Metadata\\V1";
option ruby_package = "NI::Measurements::Metadata::V1";

// Represents the metadata of a device under test
message DUTMetadata
{
  // Optional. Represents the product associated with this device under test.
  oneof product {
    // The product associated with this device under test.
    ni.measurements.metadata.v1.ProductMetadata product_metadata = 1;
    // The id of the product associated with this device under test.
    // This value is expected to be a parsable GUID or an alias. It will always
    // be returned from the service as a GUID.
    // See ni.measurements.metadata.MetadataStoreService for more information.
    string product_id = 2;
  }
  // The serial number of the device under test
  string serial_number = 3;
  // The date the device under test was manufactured
  string manufacture_date = 4;
  // A link to a resource that describes the device under test.
  // This value is expected to be a valid URI.
  string link = 5;
  // Any custom metadata to be associated with the device under test
  map<string, CustomMetadataValue> custom_metadata = 6;
  // The unique identifier of the custom metadata schema that applies to
  // this instance's custom metadata.  If any custom_metadata is associated
  // with this instance, a custom_metadata_schema_id must be provided, unless
  // the dut is created within the context of a session, in which case
  // the session must have a custom_metadata_schema_id.
  string custom_metadata_schema_id = 7;
}

// Represents the metadata of a product
message ProductMetadata
{
  // The name of the product
  string name = 1;
  // The part number of the product
  string part_number = 2;
  // A link to a resource that describes the product.
  // This value is expected to be a valid URI.
  string link = 3;
  // Any custom metadata to be associated with the product
  map<string, CustomMetadataValue> custom_metadata = 4;
  // The unique identifier of the custom metadata schema that applies to
  // this instance's custom metadata.  If any custom_metadata is associated
  // with this instance, a custom_metadata_schema_id must be provided, unless
  // the product is created within the context of a session, in which case
  // the session must have a custom_metadata_schema_id.
  string custom_metadata_schema_id = 5;
}

// Represents the metadata of hardware used to take a given measurement.
message HardwareMetadata
{
  // The vendor of the hardware
  string vendor = 1;
  // The name of the hardware
  string model = 2;
  // The part number of the hardware
  string part_number = 3;
  // The serial number of the hardware
  string serial_number = 4;
  // The date the calibration was performed on the hardware
  string calibration_date = 5;
  // A link to a resource that describes the hardware.
  // This value is expected to be a valid URI.
  string link = 6;
  // Any custom metadata to be associated with the hardware
  map<string, CustomMetadataValue> custom_metadata = 7;
  // The unique identifier of the custom metadata schema that applies to
  // this instance's custom metadata.  If any custom_metadata is associated
  // with this instance, a custom_metadata_schema_id must be provided, unless
  // the hardware is created within the context of a session, in which case
  // the session must have a custom_metadata_schema_id.
  string custom_metadata_schema_id = 8;
}

// Represents the metadata of the software that was used to take a measurement.
message SoftwareMetadata
{
  // This value should only contain letters, numbers, spaces, hyphens,
  // underscores, parentheses, periods and spaces. It must begin and
  // end with a letter or number.
  // Expected format: ^[\w\(\)-]([\w.\(\) -]*[\w\(\)-])?$
  // An empty value is also permitted.
  string product = 1;
  // The version of the software
  string version = 2;
  // A link to a resource that describes the software.
  // This value is expected to be a valid URI.
  string link = 3;
  // Any custom metadata to be associated with the software
  map<string, CustomMetadataValue> custom_metadata = 4;
  // The unique identifier of the custom metadata schema that applies to
  // this instance's custom metadata.  If any custom_metadata is associated
  // with this instance, a custom_metadata_schema_id must be provided, unless
  // the software is created within the context of a session, in which case
  // the session must have a custom_metadata_schema_id.
  string custom_metadata_schema_id = 5;
}

// Represents the metadata of the operator that took the measurement.
message OperatorMetadata
{
  // The name of the operator
  string name = 1;
  // The role of the operator
  string role = 2;
  // A link to a resource that describes the operator.
  // This value is expected to be a valid URI.
  string link = 3;
  // Any custom metadata to be associated with the operator
  map<string, CustomMetadataValue> custom_metadata = 4;
  // The unique identifier of the custom metadata schema that applies to 
  // this instance's custom metadata.  If any custom_metadata is associated
  // with this instance, a custom_metadata_schema_id must be provided, unless
  // the operator is created within the context of a session, in which case
  // the session must have a custom_metadata_schema_id.
  string custom_metadata_schema_id = 5;
}

// Represents the metadata of a test plan
message TestPlanMetadata
{
  // The name of the test plan
  string name = 1;
  // A link to a resource that describes the test plan.
  // This value is expected to be a valid URI.
  string link = 2;
  // Any custom metadata to be associated with the test plan
  map<string, CustomMetadataValue> custom_metadata = 3;
  // The unique identifier of the custom metadata schema that applies to 
  // this instance's custom metadata.  If any custom_metadata is associated
  // with this instance, a custom_metadata_schema_id must be provided, unless
  // the test plan is created within the context of a session, in which case
  // the session must have a custom_metadata_schema_id.
  string custom_metadata_schema_id = 4;
}

// Represents the metadata of a test
message TestMetadata
{
  // The name of the test
  string name = 1;
  // A link to a resource that describes the test.
  // This value is expected to be a valid URI.
  string link = 2;
  // Any custom metadata to be associated with the test
  map<string, CustomMetadataValue> custom_metadata = 3;
  // The unique identifier of the custom metadata schema that applies to 
  // this instance's custom metadata.  If any custom_metadata is associated
  // with this instance, a custom_metadata_schema_id must be provided, unless
  // the test is created within the context of a session, in which case
  // the session must have a custom_metadata_schema_id.
  string custom_metadata_schema_id = 4;
}

// Represents the metadata of a test station
message TestStationMetadata
{
  // The name of the test station
  string name = 1;
  // A link to a resource that describes the test station.
  // This value is expected to be a valid URI.
  string link = 2;
  // Any custom metadata to be associated with the test station
  map<string, CustomMetadataValue> custom_metadata = 3;
  // The unique identifier of the custom metadata schema that applies to 
  // this instance's custom metadata.  If any custom_metadata is associated
  // with this instance, a custom_metadata_schema_id must be provided, unless
  // the test station is created within the context of a session, in which case
  // the session must have a custom_metadata_schema_id.
  string custom_metadata_schema_id = 4;
}

// Represents the value of a custom metadata field.
// Currently, only string values are supported.
message CustomMetadataValue
{
  // The kind of the metadata value
  oneof metadata
  {
    // The string value of the metadata field.
    string string_value = 1;
  }
}

// A message that represents a metadata schema stored on this system.
message MetadataSchema {
  // The id of the schema.
  string schema_id = 1;
  // The schema itself.
  string schema = 2;
}

message Alias {
  // The registered alias name for the aliased metadata instance.
  string name = 1;

  // The type of the aliased metadata instance.
  AliasTargetType target_type = 2;

  // The unique identifier for the aliased metadata instance.
  string target_id = 3;
}

// The type of the aliased metadata instance.
enum AliasTargetType
{
  ALIAS_TARGET_TYPE_UNSPECIFIED = 0;
  ALIAS_TARGET_TYPE_DUT = 1;
  ALIAS_TARGET_TYPE_PRODUCT = 2;
  ALIAS_TARGET_TYPE_HARDWARE = 3;
  ALIAS_TARGET_TYPE_SOFTWARE = 4;
  ALIAS_TARGET_TYPE_OPERATOR = 5;
  ALIAS_TARGET_TYPE_TEST_PLAN = 6;
  ALIAS_TARGET_TYPE_TEST = 7;
  ALIAS_TARGET_TYPE_TEST_STATION = 8;
}
