//---------------------------------------------------------------------
//---------------------------------------------------------------------
syntax = "proto3";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
package ni.protobuf.types;

import "ni/protobuf/types/precision_timestamp.proto";

//---------------------------------------------------------------------
//---------------------------------------------------------------------
option csharp_namespace = "NationalInstruments.Protobuf.Types";
option go_package = "types";
option java_multiple_files = true;
option java_outer_classname = "WaveformProto";
option java_package = "com.ni.protobuf.types";
option objc_class_prefix = "NIPT";
option php_namespace = "NI\\PROTOBUF\\TYPES";
option ruby_package = "NI::Protobuf::Types";

// Detailed documentation for waveform attributes:
// A waveform attribute is metadata attached to a waveform.
// It is represented in this message as a map associating the name of the attribute with the value described by WaveformAttributeValue.
// The NI-DAQmx driver sets the following string attributes:
// NI_ChannelName: the name of the virtual channel producing the waveform.
// NI_LineNames: the name of the digital line in the waveform.
// NI_UnitDescription: the units of measure for the waveform.
// NI_dBReference: the reference value to use when converting measurement levels to decibel.
// For additional information on waveform attributes, please visit https://www.ni.com/docs/en-US/bundle/labview-api-ref/page/functions/get-waveform-attribute.html

// An analog waveform, which encapsulates analog data as doubles and timing information.
message DoubleAnalogWaveform
{
  // The time of the first sample in y_data.
  PrecisionTimestamp t0 = 1;

  // The time interval in seconds between data points in the waveform.
  double dt = 2;

  // The data values of the waveform.
  repeated double y_data = 3;

  // The names and values of all waveform attributes.
  // See the comment at near the top of this file for more details.
  map<string, WaveformAttributeValue> attributes = 4;
}

// An analog waveform, which encapsulates analog data as 16 bit integers and timing information.
message I16AnalogWaveform {
  // The time of the first sample in y_data.
  PrecisionTimestamp t0 = 1;

  // The time interval in seconds between data points in the waveform.
  double dt = 2;

  // The data values of the waveform.
  repeated sint32 y_data = 3;

  // The names and values of all waveform attributes.
  // See the comment at near the top of this file for more details.
  map<string, WaveformAttributeValue> attributes = 4;

  // Optional scaling information which can be used to convert unscaled data represented by this waveform to scaled data.
  Scale scale = 5;
}

// A complex waveform, which encapsulates complex data as doubles and timing information.
message DoubleComplexWaveform {
  // The time of the first sample in y_data.
  PrecisionTimestamp t0 = 1;

  // The time interval in seconds between data points in the waveform.
  double dt = 2;

  // The data values of the waveform.
  // Real and imaginary parts interleaved.  Example: [1.0+2.0j, 3.0+4.0j] is represented as [1.0, 2.0, 3.0, 4.0].
  repeated double y_data = 3;

  // The names and values of all waveform attributes.
  // See the comment at near the top of this file for more details.
  map<string, WaveformAttributeValue> attributes = 4;
}

// A complex waveform, which encapsulates complex data as 16 bit integers and timing information.
message I16ComplexWaveform {
  // The time of the first sample in y_data.
  PrecisionTimestamp t0 = 1;

  // The time interval in seconds between data points in the waveform.
  double dt = 2;

  // The data values of the waveform.
  // Real and imaginary parts interleaved. Example: [1+2j, 3+4j] is represented as [1, 2, 3, 4].
  repeated sint32 y_data = 3;

  // The names and values of all waveform attributes.
  // See the comment at near the top of this file for more details.
  map<string, WaveformAttributeValue> attributes = 4;

  // Optional scaling information which can be used to convert unscaled data represented by this waveform to scaled data.
  Scale scale = 5;
}

// A frequency spectrum, which encapsulates analog data and frequency information.
message DoubleSpectrum {
  // The start frequency of the spectrum.
  double start_frequency = 1;

  // The frequency increment of the spectrum.
  double frequency_increment = 2;

  // The data values of the spectrum.
  repeated double data = 3;

  // The names and values of all waveform attributes.
  // See the comment at near the top of this file for more details.
  map<string, WaveformAttributeValue> attributes = 4;
}

// Waveform Attribute Value
message WaveformAttributeValue
{
  // The kind of attribute value.
  oneof attribute
  {
    // Represents a bool attribute.
    bool bool_value = 1;

    // Represents an integer attribute.
    int32 integer_value = 2;

    // Represents a double attribute.
    double double_value = 3;

    // Represents a string attribute.
    string string_value = 4;
  }
}

// A digital waveform, which encapsulates digital data as integers, timing information, and extended properties.
message DigitalWaveform
{
  // The time of the first sample in y_data.
  PrecisionTimestamp t0 = 1;

  // The time interval in seconds between data points in the waveform.
  double dt = 2;

  // The data values of the waveform.
  repeated DigitalSample y_data = 3;

  // The names and values of all waveform attributes.
  // See the comment at near the top of this file for more details.
  map<string, WaveformAttributeValue> attributes = 4;
}

// A digital sample, which consists of one or more digital signals.
// We only need 8 bits to represent a digital state, but grpc doesn't define anything smaller than int32.
// However, when serialized, these int32s will be optimized into a single byte each.
message DigitalSample {
   repeated int32 signals = 1;
}

// Scaling information which can be used to convert unscaled data represented by this waveform to scaled data.
message Scale {
  oneof mode {
    LinearScale linear_scale = 1;
  }
}

// LinearScale datatype.
message LinearScale {
  // The gain of the linear scale
  double gain = 1;

  // The offset of the linear scale
  double offset = 2;
}
